DROP DATABASE payMeDB;
CREATE DATABASE payMeDB;
USE payMeDB;

CREATE TABLE users(
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(40) NOT NULL,
    last_name VARCHAR(40) NOT NULL,
	email VARCHAR(60) NOT NULL UNIQUE,
    pass VARCHAR(100) NOT NULL
)ENGINE=INNODB;

CREATE TABLE cardTypes(
	id TINYINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    description_type VARCHAR(30)
)ENGINE=INNODB;

CREATE TABLE cards(
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
	card_number CHAR(16) NOT NULL,
    card_type TINYINT NOT NULL,
    expiration_date DATE NOT NULL,
	CVV SMALLINT NOT NULL,
    balance DECIMAL(12,2) NOT NULL DEFAULT 0.00,
	CONSTRAINT FK_CARD_TYPE FOREIGN KEY(card_type) 
		REFERENCES cardTypes(id),
	CONSTRAINT FK_USER_CARD FOREIGN KEY(user_id) 
		REFERENCES users(id)
)ENGINE=INNODB;

CREATE TABLE transactionTypes(
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    description_type VARCHAR(15)
)ENGINE=INNODB;

CREATE TABLE transactions(
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	user_id INT NOT NULL,
    recipient CHAR(16) NOT NULL,
	transaction_date DATE NOT NULL,
    amount DECIMAL(12,2) NOT NULL,
    transaction_type TINYINT NOT NULL,
    concept VARCHAR(50),
	CONSTRAINT FK_USER_TRANSACTION FOREIGN KEY(user_id) 
		REFERENCES users(id)
)ENGINE=INNODB;

DROP PROCEDURE IF EXISTS SP_CREATE_USER;
DELIMITER //
CREATE PROCEDURE SP_CREATE_USER(IN _first_name VARCHAR(40), IN _last_name VARCHAR(40), IN _email VARCHAR(60), IN _pass VARCHAR(20))
BEGIN 
	IF _email NOT REGEXP '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$' THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: Invalid email format';
    END IF;
    IF LENGTH(_first_name) = 0 OR LENGTH(_last_name) = 0 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: First name and last name are required';
	END IF;
    IF LENGTH(_pass) < 8 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: The password must be at least 8 characters long';
	END IF;
    
    IF EXISTS(SELECT 1 FROM users WHERE email = _email) THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: Ese correo ya ha sido registrado';
	END IF;
    
    INSERT INTO users(first_name, last_name, email, pass) VALUES (_first_name, _last_name, _email, SHA1(_pass));
END//
DELIMITER ;

DROP PROCEDURE IF EXISTS SP_UPDATE_USER;
DELIMITER //
CREATE PROCEDURE SP_UPDATE_USER(IN _id INT, _first_name VARCHAR(40), IN _last_name VARCHAR(40), IN _pass VARCHAR(20))
BEGIN 
    IF LENGTH(_first_name) = 0 OR LENGTH(_last_name) = 0 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: First name and last name are required';
	END IF;
    IF LENGTH(_pass) < 8 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: The password must be at least 8 characters long';
	END IF;
    
	UPDATE users SET first_name = IFNULL(_first_name, first_name), last_name = IFNULL(_last_name, last_name) WHERE id = _id;
END//
DELIMITER ;

DROP PROCEDURE IF EXISTS SP_NEW_CARD;
DELIMITER //
CREATE PROCEDURE SP_NEW_CARD(IN _user_id INT, _card_number CHAR(16), _card_type TINYINT, _expiration_date DATE, _CVV SMALLINT, _balance DECIMAL(12,2))
BEGIN
	IF _CVV < 1 OR _CVV > 999 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: CVV must be a 3-digit number';
    END IF;
    
    IF NOT LENGTH(_card_number) = 16 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: Card number must be 16 digits';
    END IF;
 
	IF NOT EXISTS(SELECT 1 FROM users WHERE id = _user_id) THEN
    	SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: User doesn´t exist';
    END IF;
    
	IF EXISTS(SELECT 1 FROM cardTypes WHERE id = _card_type) THEN
		INSERT INTO cards(user_id, card_number, card_type, expiration_date, CVV, balance) VALUES (_user_id, _card_number, _card_type, _expiration_date, _CVV, _balance); 
	ELSE
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: Card type doesn´t exist';
    END IF;
END//
DELIMITER ;

CREATE VIEW v_user_cards AS 
SELECT users.id, CONCAT(users.first_name, ' ', users.last_name) AS full_name, users.email, cards.card_number, cardtypes.description_type, DATE_FORMAT(cards.expiration_date, "%m/%y") AS expiration_date, cards.CVV 
FROM users JOIN cards ON users.id = cards.user_id JOIN cardtypes ON cards.card_type = cardtypes.id;

INSERT INTO cardTypes (description_type) VALUES ('Credit card'), ('Debit card');
SELECT * FROM cardTypes;
