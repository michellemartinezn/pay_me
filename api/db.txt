DROP DATABASE payMeDB;
CREATE DATABASE payMeDB;
USE payMeDB;

CREATE TABLE users(
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(40) NOT NULL,
    last_name VARCHAR(40) NOT NULL,
	email VARCHAR(60) NOT NULL UNIQUE,
    pass VARCHAR(100) NOT NULL
)ENGINE=INNODB;

CREATE TABLE cardTypes(
	id TINYINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    description_type VARCHAR(30)
)ENGINE=INNODB;

CREATE TABLE cards(
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
	card_number CHAR(16) NOT NULL,
    card_type TINYINT NOT NULL,
    expiration_date DATE NOT NULL,
	CVV SMALLINT NOT NULL,
    balance DECIMAL(12,2) NOT NULL DEFAULT 0.00,
	CONSTRAINT FK_CARD_TYPE FOREIGN KEY(card_type) 
		REFERENCES cardTypes(id),
	CONSTRAINT FK_USER_CARD FOREIGN KEY(user_id) 
		REFERENCES users(id)
)ENGINE=INNODB;

CREATE TABLE transactionTypes(
	id TINYINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    description_type VARCHAR(15)
)ENGINE=INNODB;

CREATE TABLE services(
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    service_description VARCHAR(100)
)ENGINE=INNODB;

CREATE TABLE transactions(
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	source_card INT NOT NULL,
    recipient_id INT NOT NULL,
	transaction_date DATE NOT NULL,
    amount DECIMAL(12,2) NOT NULL,
    transaction_type TINYINT NOT NULL,
    concept VARCHAR(100),
	CONSTRAINT FK_CARD_TRANSACTION FOREIGN KEY(source_card) 
		REFERENCES cards(id),
	CONSTRAINT FK_TYPE_TRANSACTION FOREIGN KEY(transaction_type) 
		REFERENCES transactionTypes(id)
)ENGINE=INNODB;

CREATE VIEW v_user_cards AS 
SELECT users.id AS user_id, CONCAT(users.first_name, ' ', users.last_name) AS full_name, users.email, cards.card_number, cardtypes.description_type, cards.balance, DATE_FORMAT(cards.expiration_date, "%m/%y") AS expiration_date, cards.CVV, cards.id AS card_id 
FROM users JOIN cards ON users.id = cards.user_id JOIN cardtypes ON cards.card_type = cardtypes.id;

CREATE VIEW v_movements AS
SELECT cards.user_id, cards.card_number, transactiontypes.description_type, date_format(transactions.transaction_date, '%d-%m-%Y') AS transaction_date, transactions.concept, transactions.amount
FROM transactions INNER JOIN cards ON transactions.recipient_id = cards.id INNER JOIN transactiontypes ON transactions.transaction_type = transactiontypes.id 
WHERE transaction_type = 1
UNION ALL
SELECT cards.user_id, cards.card_number, transactiontypes.description_type, date_format(transactions.transaction_date, '%d-%m-%Y') AS transaction_date, transactions.concept, transactions.amount * -1
FROM transactions INNER JOIN cards ON transactions.source_card = cards.id INNER JOIN transactiontypes ON transactions.transaction_type = transactiontypes.id 
WHERE transaction_type = 1
UNION ALL
SELECT cards.user_id, cards.card_number, transactiontypes.description_type, date_format(transactions.transaction_date, '%d-%m-%Y') AS transaction_date, transactions.concept, transactions.amount * -1
FROM transactions INNER JOIN cards ON transactions.source_card = cards.id INNER JOIN transactiontypes ON transactions.transaction_type = transactiontypes.id 
WHERE transaction_type = 2;


DROP PROCEDURE IF EXISTS SP_CREATE_USER;
DELIMITER //
CREATE PROCEDURE SP_CREATE_USER(IN _first_name VARCHAR(40), IN _last_name VARCHAR(40), IN _email VARCHAR(60), IN _pass VARCHAR(255))
BEGIN 
	IF _email NOT REGEXP '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$' THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: Invalid email format';
    END IF;
    IF LENGTH(_first_name) = 0 OR LENGTH(_last_name) = 0 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: First name and last name are required';
	END IF;

    INSERT INTO users(first_name, last_name, email, pass) VALUES (_first_name, _last_name, _email, _pass);
END//
DELIMITER ;

DROP PROCEDURE IF EXISTS SP_UPDATE_USER;
DELIMITER //
CREATE PROCEDURE SP_UPDATE_USER(IN _id INT, _first_name VARCHAR(40), IN _last_name VARCHAR(40), IN _pass VARCHAR(20))
BEGIN 
    IF LENGTH(_first_name) = 0 OR LENGTH(_last_name) = 0 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: First name and last name are required';
	END IF;
    IF LENGTH(_pass) < 8 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: The password must be at least 8 characters long';
	END IF;
    
	UPDATE users SET first_name = IFNULL(_first_name, first_name), last_name = IFNULL(_last_name, last_name) WHERE id = _id;
END//
DELIMITER ;

DROP PROCEDURE IF EXISTS SP_NEW_CARD;
DELIMITER //
CREATE PROCEDURE SP_NEW_CARD(IN _user_id INT, _card_number CHAR(16), _card_type TINYINT, _expiration_date DATE, _CVV SMALLINT, _balance DECIMAL(12,2))
BEGIN
	IF _CVV < 1 OR _CVV > 999 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: CVV must be a 3-digit number';
    END IF;
    
    IF NOT LENGTH(_card_number) = 16 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: Card number must be 16 digits';
    END IF;
 
	IF NOT EXISTS(SELECT 1 FROM users WHERE id = _user_id) THEN
    	SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: User doesn´t exist';
    END IF;
    
	IF EXISTS(SELECT 1 FROM cardTypes WHERE id = _card_type) THEN
		INSERT INTO cards(user_id, card_number, card_type, expiration_date, CVV, balance) VALUES (_user_id, _card_number, _card_type, _expiration_date, _CVV, _balance); 
	ELSE
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: Card type doesn´t exist';
    END IF;
END//
DELIMITER ;

DROP PROCEDURE IF EXISTS SP_CREATE_TRANSACTION;
DELIMITER //
CREATE PROCEDURE SP_CREATE_TRANSACTION(IN _source_card INT, IN _recipient_id INT, IN _transaction_date DATE, IN _amount DECIMAL(12,2), IN _transaction_type TINYINT, IN _concept VARCHAR(100))
BEGIN 
	INSERT INTO transactions(source_card, recipient_id, transaction_date, amount, transaction_type, concept) VALUES (_source_card, _recipient_id, _transaction_date, _amount, _transaction_type, _concept);
END//
DELIMITER ;

DROP TRIGGER IF EXISTS T_AI_INSERT_BALANCE;
DELIMITER $$
CREATE TRIGGER T_AI_INSERT_BALANCE
AFTER INSERT ON transactions
FOR EACH ROW
BEGIN
	IF NEW.transaction_type = 1 THEN
		UPDATE cards SET balance = balance - NEW.amount WHERE id = NEW.source_card;
		UPDATE cards SET balance = balance + NEW.amount WHERE id = NEW.recipient_id;
    END IF;
    
    IF NEW.transaction_type = 2 THEN
		UPDATE cards SET balance = balance - NEW.amount WHERE id = NEW.source_card;
    END IF;
END$$
DELIMITER ;

DROP TRIGGER IF EXISTS T_BI_INSERT_BALANCE;
DELIMITER $$
CREATE TRIGGER T_BI_INSERT_BALANCE
BEFORE INSERT ON transactions
FOR EACH ROW
BEGIN
	DECLARE _balance DECIMAL(12,2);
    SELECT balance INTO _balance FROM cards WHERE id = NEW.source_card;
    
    IF NEW.amount > _balance THEN 
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: Saldo insuficiente';
	END IF;
END$$
DELIMITER ;

INSERT INTO cardTypes (description_type) VALUES ('Tarjeta de Crédito'), ('Tarjeta de Débito');
SELECT * FROM cardTypes;

INSERT INTO services (service_description) 
VALUES
('CFE - Servicio de electricidad'),
('SAPAS - Servicio de agua potable'),
('Gas Natural México - Servicio de gas natural'),
('Telcel - Teléfono celular'),
('Telmex - Teléfono fijo'),
('Izzi - Servicio de internet'),
('Netflix - Streaming de video'),
('Spotify - Streaming de música'),
('Disney+ - Streaming de video'),
('Amazon Prime Video - Streaming de video');

INSERT INTO transactionTypes (description_type) VALUES ('Transferencia'), ('Pago');
